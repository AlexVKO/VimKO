snippet props
	this.props.${1}

snippet st
	this.state.${1}

snippet sst
	this.setState({
		${1}: ${2}
	});

snippet render
	render() {
		return (
			${1:<div />}
		);
	}

snippet component
	import React, { Component } from 'react'
	import PropTypes from 'prop-types'

	import './style.css'

	export default class ${1:ClassName} extends Component {
		static propTypes = {
			${2}
		}

		render() {
			return (
				${3:<div />}
			)
		}
	}

snippet cdm
	componentDidMount() {
		${1}
	}

snippet cdup
	componentDidUpdate(prevProps, prevState) {
		${1}
	}

snippet cwm
	componentWillMount() {
		${1}
	}

snippet cwr
	componentWillReceiveProps(nextProps) {
		${1}
	}

snippet cwun
	componentWillUnmount() {
		${1}
	}

snippet cwu
	componentWillUpdate(nextProps, nextState) {
		${1}
	}

snippet log
	console.log('${1:here}')

snippet =()
  ${1} => ${2}

snippet ={}
	(${1}) => {
		${2}
  }

snippet import
	import ${1:foo} from '${2:bar}'

snippet map
	map(${1:(c, i)} => ${$2})

snippet filter
	filter(${1:(c, i)} => ${$2})

snippet forEach
	forEach(${1:(c, i)} => ${$2})

snippet reduce
	reduce(${1:(c, i)} => ${$2})

snippet find
	find((${1:item}) => ${1:item})

snippet let
	let ${1} = ${2}

snippet const
	const ${1} = ${2}

snippet fun
	/**
	 * ${3}
	 *
	 * @returns {${2}}
	 */
	${1:functionName}() {

	}

snippet then
	then( ({json, status}) => {

	})
